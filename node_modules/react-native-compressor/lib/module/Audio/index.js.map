{"version":3,"sources":["index.tsx"],"names":["NativeModules","AUDIO_BITRATE","DEFAULT_COMPRESS_AUDIO_OPTIONS","checkUrlAndOptions","NativeAudio","Compressor","Audio","compress","url","options","checkUrlAndOptionsResult","isCorrect","message","mediaDetails","bitrate","i","length","quality","compress_audio","error"],"mappings":"AAAA,SAASA,aAAT,QAA8B,cAA9B;AACA,SACEC,aADF,EAGEC,8BAHF,EAKEC,kBALF,QAMO,UANP;AAOA,MAAMC,WAAW,GAAGJ,aAAa,CAACK,UAAlC;AAEA,MAAMC,KAAgB,GAAG;AACvBC,EAAAA,QAAQ,EAAE,OAAOC,GAAP,EAAYC,OAAO,GAAGP,8BAAtB,KAAyD;AACjE,QAAI;AACF,YAAMQ,wBAA2C,GAC/C,MAAMP,kBAAkB,CAACK,GAAD,EAAMC,OAAN,CAD1B;;AAEA,UAAI,CAACC,wBAAwB,CAACC,SAA9B,EAAyC;AACvC,cAAMD,wBAAwB,CAACE,OAA/B;AACD,OAFD,MAEO;AACL;AAEA;AACA;AACA,cAAMC,YAAiB,GAAG;AACxBC,UAAAA,OAAO,EAAE;AADe,SAA1B,CALK,CASL;;AACA,YAAIA,OAAY,GAAGZ,8BAA8B,CAACY,OAAlD;;AAEA,YAAID,YAAY,IAAIA,YAAY,CAACC,OAAjC,EAA0C;AACxC;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,aAAa,CAACe,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7C;AACA,gBAAIF,YAAY,CAACC,OAAb,GAAuBb,aAAa,CAACc,CAAD,CAAxC,EAA6C;AAC3C,kBAAIA,CAAC,GAAG,CAAJ,GAAQd,aAAa,CAACe,MAA1B,EAAkC;AAChC,oBAAIP,OAAO,CAACQ,OAAR,KAAoB,KAAxB,EAA+BH,OAAO,GAAGb,aAAa,CAACc,CAAC,GAAG,CAAL,CAAvB,CAA/B,KACK,IAAIN,OAAO,CAACQ,OAAR,KAAoB,QAAxB,EACHH,OAAO,GAAGb,aAAa,CAACc,CAAC,GAAG,CAAL,CAAvB,CADG,KAEAD,OAAO,GAAGb,aAAa,CAACc,CAAD,CAAvB;AACN,eALD,MAKO,IAAIA,CAAC,GAAG,CAAJ,GAAQd,aAAa,CAACe,MAA1B,EAAkC;AACvC,oBAAIP,OAAO,CAACQ,OAAR,KAAoB,KAAxB,EAA+BH,OAAO,GAAGb,aAAa,CAACc,CAAC,GAAG,CAAL,CAAvB,CAA/B,KACKD,OAAO,GAAGb,aAAa,CAACc,CAAD,CAAvB;AACN,eAHM,MAGAD,OAAO,GAAGb,aAAa,CAACc,CAAD,CAAvB;;AACP;AACD,aAb4C,CAe7C;;;AACA,gBACEF,YAAY,CAACC,OAAb,IAAwBb,aAAa,CAACA,aAAa,CAACe,MAAd,GAAuB,CAAxB,CADvC,EAEE;AACAF,cAAAA,OAAO,GAAGb,aAAa,CAACA,aAAa,CAACe,MAAd,GAAuB,CAAxB,CAAvB;AACA;AACD;AACF;AACF;;AAED,eAAOZ,WAAW,CAACc,cAAZ,CAA2BV,GAA3B,EAAgC;AACrCM,UAAAA,OADqC;AAErCG,UAAAA,OAAO,EAAER,OAAO,CAACQ;AAFoB,SAAhC,CAAP;AAID;AACF,KAjDD,CAiDE,OAAOE,KAAP,EAAmB;AACnB,YAAMA,KAAK,CAACP,OAAZ;AACD;AACF;AAtDsB,CAAzB;AAyDA,eAAeN,KAAf","sourcesContent":["import { NativeModules } from 'react-native';\nimport {\n  AUDIO_BITRATE,\n  AudioType,\n  DEFAULT_COMPRESS_AUDIO_OPTIONS,\n  defaultResultType,\n  checkUrlAndOptions,\n} from '../utils';\nconst NativeAudio = NativeModules.Compressor;\n\nconst Audio: AudioType = {\n  compress: async (url, options = DEFAULT_COMPRESS_AUDIO_OPTIONS) => {\n    try {\n      const checkUrlAndOptionsResult: defaultResultType =\n        await checkUrlAndOptions(url, options);\n      if (!checkUrlAndOptionsResult.isCorrect) {\n        throw checkUrlAndOptionsResult.message;\n      } else {\n        // Get resulting output file path\n\n        // Get media details\n        // const mediaDetails: any = await getDetails(url).catch(() => null);\n        const mediaDetails: any = {\n          bitrate: 0,\n        };\n\n        // Initialize bitrate\n        let bitrate: any = DEFAULT_COMPRESS_AUDIO_OPTIONS.bitrate;\n\n        if (mediaDetails && mediaDetails.bitrate) {\n          // Check and return the appropriate bitrate according to quality expected\n          for (let i = 0; i < AUDIO_BITRATE.length; i++) {\n            // Check a particular bitrate to return its nearest lower according to quality\n            if (mediaDetails.bitrate > AUDIO_BITRATE[i]) {\n              if (i + 2 < AUDIO_BITRATE.length) {\n                if (options.quality === 'low') bitrate = AUDIO_BITRATE[i + 2];\n                else if (options.quality === 'medium')\n                  bitrate = AUDIO_BITRATE[i + 1];\n                else bitrate = AUDIO_BITRATE[i];\n              } else if (i + 1 < AUDIO_BITRATE.length) {\n                if (options.quality === 'low') bitrate = AUDIO_BITRATE[i + 1];\n                else bitrate = AUDIO_BITRATE[i];\n              } else bitrate = AUDIO_BITRATE[i];\n              break;\n            }\n\n            // Check if the matching bitrate is the last in the array\n            if (\n              mediaDetails.bitrate <= AUDIO_BITRATE[AUDIO_BITRATE.length - 1]\n            ) {\n              bitrate = AUDIO_BITRATE[AUDIO_BITRATE.length - 1];\n              break;\n            }\n          }\n        }\n\n        return NativeAudio.compress_audio(url, {\n          bitrate,\n          quality: options.quality,\n        });\n      }\n    } catch (error: any) {\n      throw error.message;\n    }\n  },\n};\n\nexport default Audio;\n"]}