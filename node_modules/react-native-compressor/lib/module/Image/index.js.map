{"version":3,"sources":["index.tsx"],"names":["NativeModules","base64UrlRegex","NativeImage","Compressor","Image","compress","value","options","Error","cleanData","replace","image_compress"],"mappings":"AAAA,SAASA,aAAT,QAA8B,cAA9B;AACA,MAAMC,cAAc,GAAG,6CAAvB;AAyCA,MAAMC,WAAW,GAAGF,aAAa,CAACG,UAAlC;AAMA,MAAMC,KAAgB,GAAG;AACvBC,EAAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAC5B,QAAI,CAACD,KAAL,EAAY;AACV,YAAM,IAAIE,KAAJ,CACJ,qEADI,CAAN;AAGD;;AACD,UAAMC,SAAS,GAAGH,KAAK,CAACI,OAAN,CAAcT,cAAd,EAA8B,EAA9B,CAAlB;AACA,WAAOC,WAAW,CAACS,cAAZ,CAA2BF,SAA3B,EAAsCF,OAAtC,CAAP;AACD;AATsB,CAAzB;AAYA,eAAeH,KAAf","sourcesContent":["import { NativeModules } from 'react-native';\nconst base64UrlRegex = /^data:image\\/.*;(?:charset=.{3,5};)?base64,/;\n\nexport type InputType = 'base64' | 'uri';\n\nexport type OutputType = 'jpg' | 'png';\n\nexport type ReturnableOutputType = 'uri' | 'base64';\n\nexport type compressionMethod = 'auto' | 'manual';\n\nexport type CompressorOptions = {\n  /***\n   * The maximum width boundary used when compressing a landscape image.\n   */\n  compressionMethod?: compressionMethod;\n  /***\n   * The maximum width boundary used when compressing a landscape image.\n   */\n  maxWidth?: number;\n  /***\n   * The maximum height boundary used when compressing a portrait image.\n   */\n  maxHeight?: number;\n  /***\n   * The compression factor used when compressing JPEG images. Won't be used in PNG.\n   */\n  quality?: number;\n  /***\n   * The type of data the input value contains.\n   */\n  input?: InputType;\n  /***\n   * The output image type.\n   */\n  output?: OutputType;\n  /***\n   * The output that will return to user.\n   */\n  returnableOutputType?: ReturnableOutputType;\n};\n\nconst NativeImage = NativeModules.Compressor;\n\ntype ImageType = {\n  compress(value: string, options?: CompressorOptions): Promise<string>;\n};\n\nconst Image: ImageType = {\n  compress: (value, options) => {\n    if (!value) {\n      throw new Error(\n        'Compression value is empty, please provide a value for compression.'\n      );\n    }\n    const cleanData = value.replace(base64UrlRegex, '');\n    return NativeImage.image_compress(cleanData, options);\n  },\n};\n\nexport default Image;\n"]}